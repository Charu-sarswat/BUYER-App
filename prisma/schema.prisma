// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============== ENUMS ===============

enum UserRole {
  USER
  ADMIN
}

enum PropertyType {
  Apartment
  Villa
  Plot
  Office
  Retail
}

enum Purpose {
  Buy
  Rent
}

enum Timeline {
  ZERO_TO_THREE_MONTHS
  THREE_TO_SIX_MONTHS
  MORE_THAN_SIX_MONTHS
  Exploring
}

enum BuyerStatus {
  New
  Qualified
  Contacted
  Visited
  Negotiation
  Converted
  Dropped
}

enum City {
  Chandigarh
  Mohali
  Zirakpur
  Panchkula
  Other
}

enum Source {
  Website
  Referral
  Walk_in
  Call
  Other
}

enum BHK {
  ONE
  TWO
  THREE
  FOUR
  Studio
}

// =============== MODELS ===============

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // Hashed password for credentials authentication
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  buyers        Buyer[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Buyer {
  id           String       @id @default(cuid())
  fullName     String
  email        String?
  phone        String
  city         City
  propertyType PropertyType
  bhk          BHK?         // Only for Apartment and Villa
  purpose      Purpose
  budgetMin    Int?         // INR
  budgetMax    Int?         // INR
  timeline     Timeline
  source       Source?
  notes        String?
  tags         String?      // JSON array of strings
  status       BuyerStatus  @default(New)
  ownerId      String
  owner        User         @relation(fields: [ownerId], references: [id])
  history      BuyerHistory[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([ownerId])
  @@index([city])
  @@index([propertyType])
  @@index([status])
  @@index([timeline])
  @@index([updatedAt])
}

model BuyerHistory {
  id        String   @id @default(cuid())
  buyerId   String
  buyer     Buyer    @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  field     String   // Field name that was changed
  oldValue  String?
  newValue  String?
  changedBy String   // User ID who made the change
  createdAt DateTime @default(now())

  @@index([buyerId])
  @@index([createdAt])
}
